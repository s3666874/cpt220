
###########################################################################
# COSC1076 - Advanced Programming Techniques                              #
# Assessed lab 1 - debugging                                              #
# Created by Paul Miller                                                  #
#                                                                         #
# Makefile for the assessed lab. Simply type 'make' (no quotes) to compile#
# this project.                                                           #
###########################################################################

# The header files for this project
HEADERS=fsupport.h main.h reverse.h

:q
# The object files generated when this project is compiled
OBJECTS=fsupport.o main.o reverse.o

# The compiler we are to use
CC=gcc

# The default compiler flags that will be used with this makefile
CFLAGS=-ansi -Wall -pedantic

# The linker flags to be used by default with this makefile. Notice
# that the linker flags is currently empty
LFLAGS=

# The name of the executable program generated by this makefile
EXE=reverse

# The default target - just make the executable
all:$(EXE)

# The link target that makes the executable - it depends on the object
# files being made previously by the target below this one. 
$(EXE): $(OBJECTS)
	$(CC) $(LFLAGS) $^ -o $@

# The target that does the compilation of each file - note that each .c 
# file will be recompiled if any of the header files is modified.
%.o:%.c $(HEADERS)
	$(CC) $(CFLAGS) -c $<
        
# the debug target - if you type make debug, you will recompile your program,
# building in the debugging symbols for use with gdb and valgrind
debug:CFLAGS+=-g -DDEBUG
debug:clean all

# this target does everything that the "debug" target above does. It also 
# compiles/links in the address sanitization library. This is a "memory 
# hardening" library that enforces strict accessing of memory addresses. 
# Any attempt to access an invalid memory address will crash your program, 
# outputting a stacktrace and additional information about the memory access
# before the crash.
sanitize:CFLAGS+=-g -DDEBUG -fsanitize=address 
sanitize:LFLAGS+=-fsanitize=address
sanitize:clean all 

# The clean target - deletes all files generated by compilation and 
# linking. It is a 'phony' target in the sense that it does not generate
# an artefact with the same name as the target. This prevents make from 
# checking for a file that exists and comparing timestamps
.PHONY:clean
clean:
	rm -f $(EXE) *.o *~

